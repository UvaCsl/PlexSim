(lambda
  (p status)
  (let
      ((proc-buffer
        (process-buffer p)))
    (when
        (eq
         (process-status p)
         'exit)
      (unwind-protect
          (if
              (zerop
               (process-exit-status p))
              (unwind-protect
                  (let
                      ((results
                        (with-current-buffer proc-buffer
                          (goto-char
                           (point-max))
                          (backward-sexp)
                          (read
                           (current-buffer)))))
                    (funcall
                     (lambda
                       (output)
                       (with-current-buffer
                           (get-buffer-create "*Org RST Export*")
                         (erase-buffer)
                         (setq buffer-file-coding-system 'undecided-unix)
                         (insert output)
                         (goto-char
                          (point-min))
                         (org-export-add-to-stack
                          (current-buffer)
                          'rst)
                         (ignore-errors
                           (funcall
                            #[0 "\300 \207"
                                [rst-mode]
                                1]))))
                     results))
                (unless org-export-async-debug
                  (and
                   (get-buffer proc-buffer)
                   (kill-buffer proc-buffer))))
            (org-export-add-to-stack proc-buffer nil p)
            (ding)
            (message "Process `%s' exited abnormally" p))
        (unless org-export-async-debug
          (delete-file "/tmp/org-export-processz9ipLx"))))))
(lambda
  (p status)
  (let
      ((proc-buffer
        (process-buffer p)))
    (when
        (eq
         (process-status p)
         'exit)
      (unwind-protect
          (if
              (zerop
               (process-exit-status p))
              (unwind-protect
                  (let
                      ((results
                        (with-current-buffer proc-buffer
                          (goto-char
                           (point-max))
                          (backward-sexp)
                          (read
                           (current-buffer)))))
                    (funcall
                     (lambda
                       (output)
                       (with-current-buffer
                           (get-buffer-create "*Org RST Export*")
                         (erase-buffer)
                         (setq buffer-file-coding-system 'undecided-unix)
                         (insert output)
                         (goto-char
                          (point-min))
                         (org-export-add-to-stack
                          (current-buffer)
                          'rst)
                         (ignore-errors
                           (funcall
                            #[0 "\300 \207"
                                [rst-mode]
                                1]))))
                     results))
                (unless org-export-async-debug
                  (and
                   (get-buffer proc-buffer)
                   (kill-buffer proc-buffer))))
            (org-export-add-to-stack proc-buffer nil p)
            (ding)
            (message "Process `%s' exited abnormally" p))
        (unless org-export-async-debug
          (delete-file "/tmp/org-export-processHJULXa"))))))

(lambda
  (p status)
  (let
      ((proc-buffer
        (process-buffer p)))
    (when
        (eq
         (process-status p)
         'exit)
      (unwind-protect
          (if
              (zerop
               (process-exit-status p))
              (unwind-protect
                  (let
                      ((results
                        (with-current-buffer proc-buffer
                          (goto-char
                           (point-max))
                          (backward-sexp)
                          (read
                           (current-buffer)))))
                    (funcall
                     (lambda
                       (output)
                       (with-current-buffer
                           (get-buffer-create "*Org RST Export*")
                         (erase-buffer)
                         (setq buffer-file-coding-system 'undecided-unix)
                         (insert output)
                         (goto-char
                          (point-min))
                         (org-export-add-to-stack
                          (current-buffer)
                          'rst)
                         (ignore-errors
                           (funcall
                            #[0 "\300 \207"
                                [rst-mode]
                                1]))))
                     results))
                (unless org-export-async-debug
                  (and
                   (get-buffer proc-buffer)
                   (kill-buffer proc-buffer))))
            (org-export-add-to-stack proc-buffer nil p)
            (ding)
            (message "Process `%s' exited abnormally" p))
        (unless org-export-async-debug
          (delete-file "/tmp/org-export-processxos0KH"))))))
(lambda
  (p status)
  (let
      ((proc-buffer
        (process-buffer p)))
    (when
        (eq
         (process-status p)
         'exit)
      (unwind-protect
          (if
              (zerop
               (process-exit-status p))
              (unwind-protect
                  (let
                      ((results
                        (with-current-buffer proc-buffer
                          (goto-char
                           (point-max))
                          (backward-sexp)
                          (read
                           (current-buffer)))))
                    (funcall
                     (lambda
                       (output)
                       (with-current-buffer
                           (get-buffer-create "*Org RST Export*")
                         (erase-buffer)
                         (setq buffer-file-coding-system 'undecided-unix)
                         (insert output)
                         (goto-char
                          (point-min))
                         (org-export-add-to-stack
                          (current-buffer)
                          'rst)
                         (ignore-errors
                           (funcall
                            #[0 "\300 \207"
                                [rst-mode]
                                1]))))
                     results))
                (unless org-export-async-debug
                  (and
                   (get-buffer proc-buffer)
                   (kill-buffer proc-buffer))))
            (org-export-add-to-stack proc-buffer nil p)
            (ding)
            (message "Process `%s' exited abnormally" p))
        (unless org-export-async-debug
          (delete-file "/tmp/org-export-processnN6f1a"))))))
