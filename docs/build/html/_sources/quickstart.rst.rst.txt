    :Author: Casper van Elteren

.. contents::

Quickstart
``========``

Setting up the model


------------

Plexsim relies on \`\`networkx\`\` to create a graphical structure on which
to simulate models. Various models are available in \`\`plexsim.models\`\`.
Below the Ising model is used

\.. code\:\: python

from matplotlib import style; style.use(“seaborn-poster”.split())
import numpy as np, os, sys, networkx as nx, warnings, matplotlib.pyplot as plt
warnings.simplefilter(“ignore”)

from plexsim import models

g = nx.grid\ :sub:`graph`\((64, 64), periodic = 1)

temperature = 2.5

settings = dict(graph = g,  # graph for the model
                t = temperature, #temperature for the Ising model
                sampleSize = len(g), #how many nodes to update per simulation step (default)
                updateType = ’async’,#the update buffers are not independent, use sync for dependency(default)
                )
m = models.Ising(\*\*settings)



pos = {i: np.array(eval(i)) for i in m.graph.nodes()}

colors = plt.cm.viridis(np.linspace(0, 1, m.nStates))
fig, ax = plt.subplots(constrained\ :sub:`layout`\ = 1, figsize = (5, 5))
nx.draw(m.graph, pos = pos, ax = ax,
        node\ :sub:`color`\ = colors[m.states.astype(int)],
        node\ :sub:`size`\ = 20)

C = “#ADC3D1”
fc = ’#16161D’
ax.margins(0.05)
ax.set\ :sub:`title`\(“Ising model with random initial condition”, fontsize = 21,
             color = C)
#ax.axis(’equal’)
ax.set\ :sub:`ylabel`\(“Node”,  labelpad = 1, color = C)
ax.set\ :sub:`xlabel`\(“Node”, color = C)
for i in “left right bottom top”.split():
    ax.spines[i].set\ :sub:`visible`\(False)
ax.axis(True)
ax.set\ :sub:`xticks`\([])
ax.set\ :sub:`yticks`\([])
ax.set\ :sub:`facecolor`\(fc)
fig.set\ :sub:`facecolor`\(fc)
fig.show()

\.. raw\:\: org

\.. image\:\: ./..//figures/ising\ :sub:`example.png`\

Simulation


------------

\.. code\:\: python

n = int(1e2) # simulation steps
m.reset() # reset model to random condition
sim\ :sub:`results`\ = m.simulate(n)

spacing = np.linspace(0, n, 4, endpoint = False).astype(int)
fig, ax = plt.subplots(2, 2, figsize = (10,10), constrained\ :sub:`layout`\ = 1)
for idx, axi in zip(spacing, ax.flat):
    tmp = sim\ :sub:`results`\[idx]
    nx.draw(m.graph, pos = pos, ax = axi, node\ :sub:`color`\ = colors[tmp.astype(int)],
            node\ :sub:`size`\ = 5)
    axi.axis(’equal’); axi.axis(True); axi.grid(False)
    axi.margins(0)
    axi.set\ :sub:`title`\(f’T = {idx}’, color = C)

axi.set\ :sub:`facecolor`\(fc)
axi.set\ :sub:`ylabel`\(“Node”,  labelpad = -5, color = C)
axi.set\ :sub:`xlabel`\(“Node”, color = C)

for i in “left right bottom top”.split():
    axi.spines[i].set\ :sub:`visible`\(False)

fig.subplots\ :sub:`adjust`\(wspace = .05, hspace = .4)
fig.set\ :sub:`facecolor`\(fc)
fig.show()

\.. raw\:\: org

\.. image\:\: ./../figures/ising\ :sub:`time`\ \ :sub:`example.png`\

Other parameters


------------

The documentation is a work in progress. Please check out the source
code for different models.
